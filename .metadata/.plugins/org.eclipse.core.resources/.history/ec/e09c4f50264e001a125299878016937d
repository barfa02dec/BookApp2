package com.app.service;

import java.util.Optional;

import javax.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;
import com.app.dao.UserDaoInf;
import com.app.exception.BookException;
import com.app.model.User;
import com.app.repositry.UserRepository;

@Service
@Transactional
@Repository
/*	Class that perform basic CRUD Operation Using Repository or Dao on User	table */
public class UserServiceImp implements UserServiceInf{

	@Autowired
	UserRepository user_repo;
	@Autowired
	UserDaoInf dao;
	
	/*	Taking User details and add into database	*/
	@Override
	public boolean registerUser(User usr) {
		if(user_repo.save(usr) != null)
			return true;
		return false;
	}
	/* taking email id and password and return user details if user details is available */
	@Override
	public User validateUser(String email, String pass) throws BookException {	
		return dao.validateUser(email, pass);
	}
	/* Taking user id and delete user from database */
	@Override
	public boolean removeUser(int user_id) throws BookException {
		try {
			user_repo.deleteById(user_id);
			return true;
		}catch (EmptyResultDataAccessException e) {
			e.printStackTrace();
			throw new BookException("Invalid User");
		}
	}
	/* Taking user id and return user details */
	@Override
	public Optional<User> getUser(int user_id) throws BookException {
			Optional<User> user = user_repo.findById(user_id);
			if(user.isPresent())
				return user;
			else
				throw new BookException("Invalid User");
	}
	/* Taking new details of user, update and returns updated user details */
	@Override
	public User updateUser(User usr) throws BookException {	
		System.out.println(this.getUser(usr.getUser_id()));
		if(this.getUser(usr.getUser_id()).isPresent()) 
			return user_repo.save(usr);
		else
			throw new BookException("Invalid User");
	}	
}