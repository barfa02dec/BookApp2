package com.app.controller;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import com.app.exception.BookException;
import com.app.model.Orders;
import com.app.service.OrderServiceInf;
import com.app.validation.ValidateOrderData;

@RestController
/**
 *  Controller for navigation between model and view 
 *  performs Booking operations that related to User and Book
 *  */
public class OrderController {

	@Autowired
	OrderServiceInf service;
	
	/**
	 *  method for performing booking operation 
	 *  */
	
	
	/**
	 *  method that taking user detail,book detail and status of the order and store in order table
	 *  */
	@PostMapping("/place_order")
	public @ResponseBody boolean placeOrder(@RequestParam (name = "user_id") int user_id,@RequestParam (name = "book_id") int book_id) throws BookException {
		try{
			ValidateOrderData.checkDataValidation(user_id, "user_id");
			ValidateOrderData.checkDataValidation(book_id, "book_id");
			return service.placeOrder(user_id, book_id);
		}catch(BookException e) {
			throw e;
		}
	}
//	/**
//	 * taking user id
//	 * delete all orders details from order based on user id
//	 * return no of orders deleted
//	 */
//	@DeleteMapping("/remove_all_orders")
//	public @ResponseBody int removeAllOrdersOfUser(@RequestParam (name = "user_id") int user_id) throws BookException {
//		return service.removeAllOrdersOfUser(user_id);
//	}
	/**
	 * taking user id and book id
	 * delete order details from order id based on user and book id
	 */
	@DeleteMapping("/remove_order")
	public @ResponseBody int removeOrder(@RequestParam (name = "user_id") int user_id,@RequestParam (name = "book_id") int book_id) throws BookException {
		return service.removeOrder(user_id, book_id);
	}
	/**
	 *  taking user id and return the all order details related to particular user
	 *  */
	@GetMapping("/all_orders")
	public @ResponseBody List<Orders> getAllOrders(@RequestParam (name = "user_id") int user_id) throws BookException{
		return service.getAllOrders(user_id);
	}
}
